import org.gradle.api.tasks.bundling.Compression
import groovy.json.JsonSlurper
import de.gesellix.gradle.docker.tasks.*

buildscript {
	repositories {
		jcenter {
			url "http://jcenter.bintray.com/"
		}
		maven {
			url "${artifactory_contextUrl}/repo"
			credentials {
				username = "${artifactory_user}"
				password = "${artifactory_password}"
			}
		}
	}
	dependencies {
		classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1"
		classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
	}
}

plugins {
	id "de.gesellix.docker" version "2016-02-08T22-29-47"
}

apply plugin: "de.gesellix.docker"
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.google.osdetector'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

distsDirName = 'dist'
dependencyCacheDirName = 'tmp'

def libsDirName = 'lib'
def confDirName = 'conf'

def loadProjectVersionFrom(String sourceFileName) {
	def inputFile = new File(sourceFileName)
	def json = new JsonSlurper().parseText(inputFile.text)
	ext.version = json.config.run.version
}
loadProjectVersionFrom confDirName + File.separator + "defaults.json"

version = ext.version
group = "com.emc.${rootProject.name}"

task wrapper(type: Wrapper) {
	gradleVersion = '2.11'
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// source sets//////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

sourceSets {
	////////////////////////////////////////////////////////////////////////////////////////////////
	// shared basic functionality //////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	common {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'common'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		resources {
			srcDir(['src', 'main', 'resources'].join(File.separator))
			include 'allpermissions.policy'
			include 'logging.json'
			include 'mongoose.json'
		}
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// core ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	coreApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'api'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output
	}
	coreImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'core', 'impl'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// storage API adapters ////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	storageAdapterAtmos {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'atmos'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterS3 {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 's3'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageAdapterSwift {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'adapter', 'swift'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// misc ////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	serverApi {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'api'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output + sourceSets.coreApi.output
	}
	webserver {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'webserver'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// run modes ///////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	client {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'client'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	serverImpl {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'server', 'impl'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output + sourceSets.serverApi.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
	}
	storageMock {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'storage', 'mock'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	util {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'util'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output + sourceSets.client.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
	}
	scenario {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'scenario'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.common.output + sourceSets.util.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.client.output + storageMock.output
	}
	webui {
		java {
			srcDir(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'webui'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.storageMock.output + sourceSets.util.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.storageMock.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}
	////////////////////////////////////////////////////////////////////////////////////////////////
	// launcher ////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////
	cli {
		java {
			srcDirs(['src', 'main', 'java', 'com', 'emc', 'mongoose', 'run', 'cli'].join(File.separator))
			include '**'
			exclude(['**', '*Test.java'].join(File.separator))
		}
		//
		compileClasspath += sourceSets.common.output + sourceSets.scenario.output
		compileClasspath += sourceSets.coreApi.output + sourceSets.coreImpl.output
		compileClasspath += sourceSets.serverApi.output + sourceSets.serverImpl.output
		compileClasspath += sourceSets.webserver.output + sourceSets.webui.output
		compileClasspath += sourceSets.storageMock.output + sourceSets.util.output
		//
		runtimeClasspath += sourceSets.client.output + sourceSets.webui.output
		runtimeClasspath += sourceSets.storageAdapterAtmos.output + sourceSets.storageAdapterS3.output + sourceSets.storageAdapterSwift.output
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Tests ///////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////

	unitTest {
		java {
			srcDir(['src', 'test', 'java', 'com', 'emc', 'mongoose', 'unit'].join(File.separator))
			include(['**', '*Test.java'].join(File.separator))
		}
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}

	systemTest {
		java {
			srcDir(['src', 'test', 'java', 'com', 'emc', 'mongoose', 'system'].join(File.separator))
			include '**'
		}
		resources {
			srcDir(['src', 'main', 'resources'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}

	perfTest {
		java {
			srcDir(['src', 'test', 'java', 'com', 'emc', 'mongoose', 'perf'].join(File.separator))
			include '**'
		}
		resources {
			srcDir(['src', 'main', 'resources'].join(File.separator))
			include '**'
		}
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// dependencies ////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

repositories {
	mavenCentral()
}
apply from: "deps.gradle"

dependencies {

	// common
	commonCompile (
		library.commons_configuration,
		library.commons_lang,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api_plus_core,
		library.log4j_iostreams,
		library.jackson_core,
		library.jackson_databind,
	)
	commonRuntime (
		library.runtime_logging,
	)

	// core
	coreApiCompile (
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.log4j_api,
	)
	coreApiRuntime (
		library.runtime_logging,
	)

	coreImplCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_collections4,
		library.httpcore_plus_nio,
		library.log4j_api_plus_core,
		library.metrics_core,
	)
	coreImplRuntime(
		library.runtime_logging,
	)

	// storage API adapters
	storageAdapterAtmosCompile (
		library.commons_codec,
		library.commons_configuration,
		library.commons_lang,
		library.httpcore,
		library.log4j_api_plus_core,
	)
	storageAdapterAtmosRuntime (
		library.runtime_logging,
	)

	storageAdapterS3Compile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api_plus_core,
	)
	storageAdapterS3Runtime (
		library.runtime_logging,
	)

	storageAdapterSwiftCompile (
		library.commons_lang,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api_plus_core,
		library.jackson_core,
	)
	storageAdapterSwiftRuntime (
		library.runtime_logging,
	)

	// misc

	serverApiCompile (
		library.httpcore,
	)
	serverApiRuntime (
		library.runtime_logging,
	)

	webserverCompile (
		library.commons_configuration,
		library.log4j_api_plus_core,
		library.jetty_svc,
	)
	webserverRuntime (
		library.runtime_logging,
		library.runtime_jetty_svc,
	)

	// run modes

	clientCompile (
		library.commons_configuration,
		library.httpcore,
		library.log4j_api_plus_core,
		library.metrics_core,
	)
	clientRuntime (
		library.runtime_logging,
		library.slf4j_api,
	)

	serverImplCompile (
		library.commons_collections4,
		library.commons_configuration,
		library.httpcore,
		library.log4j_api_plus_core,
	)
	serverImplRuntime (
		library.runtime_logging,
	)

	scenarioCompile (
		library.commons_configuration,
		library.commons_collections4,
		library.log4j_api_plus_core,
		library.httpcore,
		library.jackson_databind,
		library.json_schema_validator,
	)
	scenarioRuntime (
		library.runtime_logging,
	)

	storageMockCompile(
		library.commons_codec,
		library.commons_collections4,
		library.commons_configuration,
		library.httpcore_plus_nio,
		library.jackson_databind,
		library.log4j_api_plus_core,
		library.metrics_core,
	)
	storageMockRuntime (
		library.runtime_logging,
	)

	webuiCompile (
		library.commons_collections4,
		library.commons_configuration,
		library.jackson_databind,
		library.log4j_api_plus_core,
		library.jetty_http,
		library.jetty_servlet_api,
	)
	webuiRuntime (
		library.runtime_logging,
		library.runtime_jetty,
		library.runtime_webapp,
	)

	// launcher
	cliCompile (
		library.commons_cli,
		library.commons_collections4,
		library.commons_configuration,
		library.commons_lang,
		library.log4j_api_plus_core,
	)
	cliRuntime (
		library.runtime_logging,
	)

	utilCompile (
		library.log4j_api_plus_core,
		library.commons_configuration,
		library.commons_collections4,
		library.httpcore,
	)
	utilRuntime (
		library.runtime_logging,
		library.commons_cli,
	)

	unitTestCompile (
		library.junit,
		library.junit_mockito,
		library.json_schema_validator,
	)

	systemTestCompile(
		library.commons_csv,
		library.junit,
		library.json_schema_validator,
	)

	perfTestCompile (
		library.junit,
	)
}

configurations {

	compile.extendsFrom(
		commonCompile,
		coreApiCompile,
		coreImplCompile,
		storageAdapterAtmosImplCompile,
		storageAdapterS3Compile,
		storageAdapterSwiftCompile,
		serverApiCompile,
		webserverCompile,
		clientCompile,
		scenarioCompile,
		serverImplCompile,
		storageMockCompile,
		webuiCompile,
		cliCompile,
		utilCompile,
	)

	runtime.extendsFrom(
		commonRuntime,
		coreApiRuntime,
		coreImplRuntime,
		storageAdapterAtmosImplRuntime,
		storageAdapterS3Runtime,
		storageAdapterSwiftRuntime,
		serverApiRuntime,
		webserverRuntime,
		clientRuntime,
		scenarioRuntime,
		serverImplRuntime,
		storageMockRuntime,
		cliRuntime,
		utilRuntime,
	)

	unitTestCompile.extendsFrom(
		compile,
	)
	unitTestRuntime.extendsFrom(
		runtime,
	)

	systemTestCompile.extendsFrom(
		compile,
	)
	systemTestRuntime.extendsFrom(
		runtime,
	)

	perfTestCompile.extendsFrom(
		compile,
	)
	perfTestRuntime.extendsFrom(
		runtime,
	)

}

////////////////////////////////////////////////////////////////////////////////////////////////////
ext.sharedManifest = manifest {
	attributes('Implementation-Version': version)
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// common //////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task commonJar(type: Jar) {
	classifier "common"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.common.output
	manifest {
		from sharedManifest
		attributes (
			'Implementation-Title': rootProject.name + "-common",
			'Class-Path': configurations.commonRuntime.collect {
				libsDirName + File.separator + it.getName()
			}.join(' '),
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// core ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task coreApiJar(type: Jar) {
	dependsOn commonJar
	classifier "core-api"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.coreApi.output
	manifest {
		from sharedManifest
		attributes (
			'Implementation-Title': rootProject.name + "-core-api",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				configurations.coreApiRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task coreImplJar(type: Jar) {
	dependsOn commonJar, coreApiJar
	classifier "core-impl"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.coreImpl.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-core-impl",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				configurations.coreImplRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// storage API adapters ////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task storageAdapterAtmosJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	classifier "storage-adapter-atmos"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.storageAdapterAtmos.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-atmos",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				configurations.storageAdapterAtmosRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterS3Jar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	classifier "storage-adapter-s3"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.storageAdapterS3.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-s3s",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				configurations.storageAdapterS3Runtime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task storageAdapterSwiftJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	classifier "storage-adapter-swift"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.storageAdapterSwift.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-adapter-swift",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				configurations.storageAdapterSwiftRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// misc ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task serverApiJar(type: Jar) {
	dependsOn commonJar, coreApiJar
	classifier "server-api"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.serverApi.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-server-api",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				configurations.serverApiRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task webserverJar(type: Jar) {
	dependsOn commonJar
	classifier "webserver"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.webserver.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-webserver",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				configurations.webserverRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// run modes ///////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task clientJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, serverApiJar
	classifier "client"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.client.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-client-impl",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				configurations.clientRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task serverImplJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, serverApiJar
	classifier "server-impl"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.serverImpl.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-server-impl",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				configurations.serverImplRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task storageMockJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	classifier "storage-mock"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.storageMock.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-storage-mock",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				configurations.storageMockRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task utilJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar, clientJar
	dependsOn coreApiJar, coreImplJar, serverApiJar, serverImplJar
	//dependsOn storageAdapterAtmosJar, storageAdapterS3Jar, storageAdapterSwiftJar
	classifier "util"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.util.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-util",
			'Class-Path': [
				clientJar.outputs.files.collect {it.name}.join(' '),
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				configurations.utilRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task scenarioJar(type: Jar) {
	dependsOn commonJar, utilJar, coreApiJar, coreImplJar
	dependsOn serverApiJar, serverImplJar, clientJar, storageMockJar
	classifier "scenario"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.scenario.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-scenario",
			'Main-Class': "com.emc.mongoose.run.scenario.Sanity",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				utilJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				clientJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				configurations.scenarioRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task webuiJar(type: Jar) {
	dependsOn commonJar, coreApiJar, coreImplJar
	dependsOn serverApiJar, serverImplJar
	dependsOn storageMockJar, scenarioJar
	classifier "webui"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.webui.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-webui",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				utilJar.outputs.files.collect {it.name}.join(' '),
				configurations.webuiRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
// entry point /////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

task cliJar(type: Jar) {
	dependsOn commonJar, storageMockJar, coreApiJar, coreImplJar
	dependsOn coreApiJar, coreImplJar, serverApiJar, serverImplJar
	//dependsOn storageAdapterAtmosJar, storageAdapterS3Jar, storageAdapterSwiftJar
	dependsOn clientJar, scenarioJar, webuiJar
	classifier "cli"
	archiveName "${baseName}.${extension}"
	from sourceSets.cli.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-cli",
			'Main-Class': "com.emc.mongoose.run.cli.ModeDispatcher",
			'Class-Path': [
				clientJar.outputs.files.collect {it.name}.join(' '),
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				utilJar.outputs.files.collect {it.name}.join(' '),
				webserverJar.outputs.files.collect {it.name}.join(' '),
				webuiJar.outputs.files.collect {it.name}.join(' '),
				configurations.cliRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task unitTestJar(type: Jar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn serverApiJar
	dependsOn serverImplJar
	dependsOn webserverJar
	dependsOn clientJar
	dependsOn scenarioJar
	dependsOn storageMockJar
	dependsOn webuiJar
	dependsOn cliJar
	dependsOn utilJar

	classifier "unit-test"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.unitTest.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-unit-test",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				webserverJar.outputs.files.collect {it.name}.join(' '),
				clientJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				webuiJar.outputs.files.collect {it.name}.join(' '),
				cliJar.outputs.files.collect {it.name}.join(' '),
				utilJar.outputs.files.collect {it.name}.join(' '),
				configurations.unitTestRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task systemTestJar(type: Jar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn serverApiJar
	dependsOn serverImplJar
	dependsOn webserverJar
	dependsOn clientJar
	dependsOn scenarioJar
	dependsOn storageMockJar
	dependsOn webuiJar
	dependsOn cliJar
	dependsOn utilJar

	classifier "system-test"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.systemTest.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-system-test",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				webserverJar.outputs.files.collect {it.name}.join(' '),
				clientJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				webuiJar.outputs.files.collect {it.name}.join(' '),
				cliJar.outputs.files.collect {it.name}.join(' '),
				utilJar.outputs.files.collect {it.name}.join(' '),
				configurations.systemTestRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}

task perfTestJar(type: Jar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn serverApiJar
	dependsOn serverImplJar
	dependsOn webserverJar
	dependsOn clientJar
	dependsOn scenarioJar
	dependsOn storageMockJar
	dependsOn webuiJar
	dependsOn cliJar
	dependsOn utilJar

	classifier "perf-test"
	archiveName "${baseName}-${classifier}.${extension}"
	from sourceSets.perfTest.output
	manifest {
		from sharedManifest
		attributes(
			'Implementation-Title': rootProject.name + "-perf-test",
			'Class-Path': [
				commonJar.outputs.files.collect {it.name}.join(' '),
				coreApiJar.outputs.files.collect {it.name}.join(' '),
				coreImplJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterAtmosJar.outputs.files.collect {it.name}.join(' '),
				storageAdapterS3Jar.outputs.files.collect {it.name}.join(' '),
				storageAdapterSwiftJar.outputs.files.collect {it.name}.join(' '),
				serverApiJar.outputs.files.collect {it.name}.join(' '),
				serverImplJar.outputs.files.collect {it.name}.join(' '),
				webserverJar.outputs.files.collect {it.name}.join(' '),
				clientJar.outputs.files.collect {it.name}.join(' '),
				scenarioJar.outputs.files.collect {it.name}.join(' '),
				storageMockJar.outputs.files.collect {it.name}.join(' '),
				webuiJar.outputs.files.collect {it.name}.join(' '),
				cliJar.outputs.files.collect {it.name}.join(' '),
				utilJar.outputs.files.collect {it.name}.join(' '),
				configurations.perfTestRuntime.collect {
					libsDirName + File.separator + it.getName()
				}.join(' '),
			].join(' ')
		)
	}
}


task dist(type: Tar) {

	dependsOn commonJar
	dependsOn coreApiJar
	dependsOn coreImplJar
	dependsOn storageAdapterAtmosJar
	dependsOn storageAdapterS3Jar
	dependsOn storageAdapterSwiftJar
	dependsOn serverApiJar
	dependsOn webserverJar
	dependsOn clientJar
	dependsOn scenarioJar
	dependsOn serverImplJar
	dependsOn storageMockJar
	dependsOn webuiJar
	dependsOn cliJar
	dependsOn utilJar
	dependsOn unitTestJar
	dependsOn systemTestJar
	dependsOn perfTestJar

	baseName = project.name
	compression = Compression.GZIP
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	List webappLibs = new LinkedList()
	configurations.webuiRuntime.collect {
		def path = it.getAbsolutePath()
		if(
			it.isFile() && (path.contains("jstl") || path.contains("log4j-web") ||
			path.contains("webjars"))
		) {
			webappLibs.add(path)
		}
	}

	into(baseName + '-' + version) {
		into('conf') {
			from { 'conf' }
		}
		into('doc') {
			from { 'doc' }
		}
		into('lib') {
			from { configurations.runtime }
		}
		into('scenario') {
			from { 'scenario' }
		}
		from commonJar.outputs.files
		from coreApiJar.outputs.files
		from coreImplJar.outputs.files
		from storageAdapterAtmosJar.outputs.files
		from storageAdapterS3Jar.outputs.files
		from storageAdapterSwiftJar.outputs.files
		from serverApiJar.outputs.files
		from webserverJar.outputs.files
		from clientJar.outputs.files
		from scenarioJar.outputs.files
		from serverImplJar.outputs.files
		from storageMockJar.outputs.files
		from webuiJar.outputs.files
		from cliJar.outputs.files
		from utilJar.outputs.files
		from unitTestJar.outputs.files
		from systemTestJar.outputs.files
		from perfTestJar.outputs.files
		into('webapp') {
			from { ["src", "main", "webapp"].join(File.separator) }
		}
		into(["webapp", "WEB-INF", "lib"].join(File.separator)) {
			from { webappLibs }
		}
	}
}

idea {
	module {
		name = rootProject.name
		//jdkName = sourceCompatibility
		inheritOutputDirs = false
		sourceDirs += file("src" + File.separator + "main")
		testSourceDirs += file("src" + File.separator + "main")
		outputDir = sourceSets.common.output.resourcesDir
		testOutputDir = sourceSets.common.output.resourcesDir
		scopes = [
			COMPILE: [plus: [configurations.compile], minus: []],
			RUNTIME: [plus: [configurations.runtime], minus: [configurations.compile]],
			TEST: [
				plus: [configurations.unitTestRuntime, configurations.systemTestRuntime],
				minus: [configurations.runtime]
			],
			PROVIDED: [
				plus: [configurations.unitTestRuntime, configurations.systemTestRuntime]
			]
		]
		//for cleaning mongoose.iml
		iml {
			beforeMerged { module ->
				//if you want skip merging exclude dirs
				//module.excludeFolders.clear()
				def imlFile = project.projectDir.absolutePath +"${File.separator}" + project.name + '.iml'
				if (file(imlFile).exists()) file(imlFile).delete()
			}
		}
		downloadSources = true
	}
	project.ipr {
		withXml { provider ->
			provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
		}
	}
}

task unitTest(type: Test) {

	testClassesDir = sourceSets.unitTest.output.classesDir
	classpath = sourceSets.unitTest.runtimeClasspath

	jvmArgs '-Dlog4j.configurationFile=' + new File("").getCanonicalPath() +
		"${File.separator}src${File.separator}main${File.separator}resources${File.separator}logging.json"
	jvmArgs '-Dlog4j.configurationFactory=org.apache.logging.log4j.core.config.json.JsonConfigurationFactory'
	jvmArgs '-Djava.security.policy=file:' + new File("").getCanonicalPath() +
		"${File.separator}src${File.separator}main${File.separator}resources${File.separator}allpermissions.policy"
	testLogging.showStandardStreams = true
	testLogging { events "passed", "skipped", "failed" }
}

task systemTest(type: Test, dependsOn: dist) {

	testClassesDir = sourceSets.systemTest.output.classesDir
	include '**/SystemTestSuite.class'
	classpath = sourceSets.systemTest.runtimeClasspath
	forkEvery = 1
	minHeapSize = "2560m"
	maxHeapSize = "2560m"
	jvmArgs "-XX:+HeapDumpOnOutOfMemoryError", "-Djava.security.policy=file:" + new File("").getCanonicalPath() +
		"${File.separator}src${File.separator}main${File.separator}resources${File.separator}allpermissions.policy",
		"-Dnetwork.serveJMX=true"
	testLogging {
		events "skipped", "passed", "failed", "standardOut", "standardError"
	}
}

task perfTest(type: Test, dependsOn: dist) {

	testClassesDir = sourceSets.systemTest.output.classesDir
	include '**/PerfTestSuite.class'
	classpath = sourceSets.systemTest.runtimeClasspath
	forkEvery = 1
	minHeapSize = "4g"
	maxHeapSize = "4g"
	jvmArgs '-XX:+HeapDumpOnOutOfMemoryError', '-Djava.security.policy=file:' + new File("").getCanonicalPath() +
		"${File.separator}src${File.separator}main${File.separator}resources${File.separator}allpermissions.policy"
	testLogging.showStandardStreams = true
	testLogging { events "passed", "skipped", "failed" }
}

build.dependsOn commonJar, coreApiJar, coreImplJar, storageAdapterAtmosJar, storageAdapterS3Jar
build.dependsOn storageAdapterSwiftJar, serverApiJar, webserverJar, clientJar, scenarioJar
build.dependsOn serverImplJar, storageMockJar, webuiJar, cliJar, utilJar
build.dependsOn unitTestJar, systemTestJar, perfTestJar

tasks.idea.dependsOn(cleanIdea)
//tasks.idea.dependsOn(build)

// TRAVIS CI ///////////////////////////////////////////////////////////////////////////////////////

task compileTestJava(type: JavaCompile, overwrite: true, dependsOn: compileUnitTestJava)
task test(type: Test, overwrite: true) {
	dependsOn unitTest
	dependsOn systemTest
	dependsOn perfTest
}
