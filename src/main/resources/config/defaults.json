{
	"item": {
		"data": {
			"input": {
				// The source file for the content/payload generation
				"file": null,
				"layer": {
					// The maximum count of the data "layers" to be cached into the memory
					"cache": 16,
					// The size of the content source ring buffer
					"size": "4MB"
				},
				// The initial value for the random data generation
				"seed": "7a42d9c483244167"
			},
			"ranges": {
				// The number/range of numbers of the source objects used to concatenate every
				// destination object.
				"concat": null,
				// The fixed byte ranges to update or read (depends on the specified op type)
				"fixed": null,
				// The count of the random ranges to update or read
				"random": 0,
				// The size threshold to enable multipart upload if supported by the configured storage driver
				"threshold": 0
			},
			// The size of the data items to process. Doesn't have any effect if item-type=path
			"size": "1MB",
			// Specifies whether to verify the content while reading the data items or not.
			// Doesn't have any effect if load-type != read
			"verify": false
		},
		"input": {
			// The source file for the items to process.
			// If null the behavior depends on the load type.
			"file": null,
			// The source path which may be used as items input if not "item-input-file" is specified.
			// Also used for the copy mode as the path containing the items to be copied into the output path.
			"path": null
		},
		"naming": {
			// Specifies the new items naming order. Has effect only in the case of create load.
			// "asc": the new items are named in the ascending order,
			// "desc": the new items are named in the descending order,
			// "random": the new items are named randomly
			"type": "random",
			// The name prefix for the processed items.
			// A correct value is necessary to pass the content verification in the case of read load.
			"prefix": null,
			// The radix for the item ids. May be in the range of 2..36.
			// A correct value is necessary to pass the content verification in the case of read load.
			"radix": 36,
			//
			"step": 1,
			// The start id for the new item ids
			"offset": 0,
			// The name length for the new items.
			// Has effect only in the case of create (if not partial) load
			"length": 12
		},
		"output": {
			// Specified the target file for the items processed successfully.
			// If null the items info is not saved.
			"file": null,
			// The target path. Null (default) value leads to path name generation and pre-creation.
			"path": null
		},
		// The type of the item to use, the possible values are: "data", "path", "token".
		// In case of filesystem "data" means files and "path" means directories
		"type": "data"
	},
	"load": {
		"batch": {
			// The count of the items/tasks processed by a single invocation.
			// It may be useful to set to 1 for MPU or DLO tests
			"size": 4096
		},
		"op": {
			"limit": {
				// The maximum number of the operations per second (throughput limit) for the test step.
				// 0 means no rate limit.
				"rate": 0,
				// The maximum number of the unique items processed in the case of the recycle mode
				"recycle": 1000000
			},
			// Specifies whether to recycle the load tasks or not
			"recycle": false,
			// Specifies whether to retry the failed I/O tasks or not
			"retry": false,
			// Defines whether to shuffle or not the items got from the item input,
			// what should make the order of the I/O tasks execution randomized
			"shuffle": false,
			// The operation to process the items, may be "noop", "create", "update", "read" or "delete"
			"type": "create"
		},
		// The count of the service threads. 0 means automatic value
		"service": {
			"threads": 0
		},
		"step": {
			// The test step id. Generated automatically if not specified (null).
			// Specifies also the logs sub directory path: log/<STEP_ID>/
			"id": null,
			// The internal flag used to determine if the id was automatically generated or not
			"idAutoGenerated": false,
			"limit": {
				// The maximum number of the items to process for any load step. 0 means no limit
				"count": 0,
				"fail": {
					// The maximum number of the failed I/O tasks before the step will be stopped,
					// 0 means no limit
					"count": 100000,
					// Stop the step if failures rate is more than success rate and if the flag is set to true
					"rate": false
				},
				// The maximum size of the data items to process. 0 means no size limit.
				"size": 0,
				// The maximum time to perform a load step. 0 means no time limit
				"time": 0
			},
			"node": {
				// Distributed mode: the list of the Mongoose node IPs or hostnames,
				// may include port numbers to override the default port number value.
				// Standalone mode is used if empty (default behaviour).
				"addrs": [
				],
				// Distributed mode: the common port number to connect the Mongoose nodes
				"port": 1099
			}
		}
	},
	"output": {
		// Use colored standard output flag
		"color": true,
		"metrics": {
			"average": {
				// The time period for the load step's metrics console output.
				// 0 means to not to output the metrics to the console
				"period": "10s",
				// Persist the average (periodic) metrics if true
				"persist": true,
				"table": {
					"header": {
						// Output the metrics table header every N rows
						"period": 20
					}
				}
			},
			"summary": {
				// Output the results.xml file used as a PerfDb input if true
				"perfDbResultsFile": false,
				// Persist the summary (total) metrics if true
				"persist": true
			},
			"trace": {
				// Persist the information about each load operation if true
				"persist": false
			},
			// The concurrency threshold to enable intermediate statistics calculation,
			// 0 means no threshold
			"threshold": 0
		}
	},
	"run": {
		// start in the node service node
		"node": false,
		// The scenario file to run, null means invoking the default.js scenario bundled into the distribution
		"scenario": null,
		// The Mongoose version
		"version": "4.0.0"
	},
	"storage": {
		"auth": {
			// The path to a credentials list file, containing the lines of comma-separated uids and secret keys
			"file": null,
			// The authentication secret if constant and required
			"secret": null,
			// FS, S3: no effect, Atmos: subtenant, Swift: token
			"token": null,
			// The authentication identifier if constant and required
			"uid": null
		},
		"driver": {
			"limit" : {
				// The maxiumum number of concurrent I/O tasks, 1 by default, 0 - no limit
				"concurrency": 1,
				"queue": {
					"input": 1000000,
					"output": 1000000
				}
			},
			// The count of the shared/global I/O executor threads. 0 (default) is reserved to use the CPU cores/threads count
			"threads": 0,
			// The identifier pointing to the one of the registered storage driver implementations to use
			"type": "s3"
		}
	},
	// The aliasing section mapping the old configuration parameters/values to the current ones
	"aliasing": [

		// v3.0.0
		{
			"name": "load-threads",
			"deprecated": true,
			"target": "storage-driver-limit-concurrency"
		},
		{
			"name": "run-id",
			"deprecated": true,
			"target": "load-step-id"
		},
		{
			"name": "noop",
			"target": "load-op-type=noop"
		},
		{
			"name": "create",
			"target": "load-op-type=create"
		},
		{
			"name": "read",
			"target": "load-op-type=read"
		},
		{
			"name": "update",
			"target": "load-op-type=update"
		},
		{
			"name": "delete",
			"target": "load-op-type=delete"
		},
		{
			"name": "atmos-subtenant",
			"target": "storage-auth-token"
		},
		{
			"name": "s3-input-bucket",
			"target": "item-input-path"
		},
		{
			"name": "s3-output-bucket",
			"target": "item-output-path"
		},
		{
			"name": "swift-input-container",
			"target": "item-input-path"
		},
		{
			"name": "swift-output-container",
			"target": "item-output-path"
		},

		// v3.2.0
		{
			"name": "socket-bindBacklogSize",
			"deprecated": true,
			"target": "storage-net-bindBacklogSize"
		},
		{
			"name": "socket-interestOpQueued",
			"deprecated": true,
			"target": "storage-net-interestOpQueued"
		},
		{
			"name": "socket-keepAlive",
			"deprecated": true,
			"target": "storage-net-keepAlive"
		},
		{
			"name": "socket-linger",
			"deprecated": true,
			"target": "storage-net-linger"
		},
		{
			"name": "socket-reuseAddr",
			"deprecated": true,
			"target": "storage-net-reuseAddr"
		},
		{
			"name": "socket-rcvBuf",
			"deprecated": true,
			"target": "storage-net-rcvBuf"
		},
		{
			"name": "socket-sndBuf",
			"deprecated": true,
			"target": "storage-net-sndBuf"
		},
		{
			"name": "socket-tcpNoDelay",
			"deprecated": true,
			"target": "storage-net-tcpNoDelay"
		},
		{
			"name": "socket-timeoutMilliSec",
			"deprecated": true,
			"target": "storage-net-timeOutMilliSec"
		},
		{
			"name": "storage-ssl",
			"deprecated": true,
			"target": "storage-net-ssl"
		},
		{
			"name": "storage-http-api",
			"deprecated": true,
			"target": "storage-driver-type"
		},
		{
			"name": "socket-http-fsAccess",
			"deprecated": true,
			"target": "storage-net-http-fsAccess"
		},
		{
			"name": "storage-http-headers",
			"deprecated": true,
			"target": "storage-net-http-headers"
		},
		{
			"name": "storage-http-namespace",
			"deprecated": true,
			"target": "storage-net-http-namespace"
		},
		{
			"name": "storage-http-versioning",
			"deprecated": true,
			"target": "storage-net-http-versioning"
		},
		{
			"name": "storage-node-addrs",
			"deprecated": true,
			"target": "storage-net-node-addrs"
		},
		{
			"name": "storage-node-port",
			"deprecated": true,
			"target": "storage-net-node-port"
		},
		{
			"name": "storage-type",
			"deprecated": true,
			"target": "storage-driver-type"
		},
		{
			"name": "storage-net-http-api",
			"deprecated": true,
			"target": "storage-driver-type"
		},

		// v3.3.0
		{
			"name": "load-concurrency",
			"deprecated": true,
			"target": "storage-driver-limit-concurrency"
		},
		{
			"name": "load-job-name",
			"deprecated": true,
			"target": "load-step-id"
		},
		{
			"name": "load-limit-count",
			"deprecated": true,
			"target": "load-step-limit-count"
		},
		{
			"name": "load-limit-size",
			"deprecated": true,
			"target": "load-step-limit-size"
		},
		{
			"name": "load-limit-time",
			"deprecated": true,
			"target": "load-step-limit-time"
		},
		{
			"name": "load-metrics-period",
			"deprecated": true,
			"target": "output-metrics-average-period"
		},
		{
			"name": "load-metrics-precondition",
			"deprecated": true
		},
		{
			"name": "load-metrics-threshold",
			"deprecated": true,
			"target": "output-metrics-threshold"
		},
		{
			"name": "storage-auth-id",
			"deprecated": true,
			"target": "storage-auth-uid"
		},

		// v3.4.0
		{
			"name": "item-data-content-ringSize",
			"deprecated": true,
			"target": "item-data-input-layer-size"
		},

		// v3.5.0
		{
			"name": "test-step-metrics-period",
			"deprecated": true,
			"target": "output-metrics-average-period"
		},
		{
			"name": "test-step-metrics-threshold",
			"deprecated": true,
			"target": "output-metrics-threshold"
		},
		{
			"name": "test-step-name",
			"deprecated": true,
			"target": "load-step-id"
		},
		{
			"name": "test-step-limit-rate",
			"deprecated": true,
			"target": "load-op-limit-rate"
		},
		{
			"name": "item-data-content-file",
			"deprecated": true,
			"target": "item-data-input-file"
		},
		{
			"name": "item-data-content-seed",
			"deprecated": true,
			"target": "item-data-input-seed"
		},
		{
			"name": "item-data-content-ring-cache",
			"deprecated": true,
			"target": "item-data-input-layer-cache"
		},
		{
			"name": "item-data-content-ring-size",
			"deprecated": true,
			"target": "item-data-input-layer-size"
		},
		{
			"name": "load-circular",
			"deprecated": true,
			"target": "load-op-recycle"
		},
		{
			"name": "load-queue-size",
			"deprecated": true,
			"target": "load-op-limit-recycle"
		},
		{
			"name": "storage-driver-io-workers",
			"deprecated": true,
			"target": "storage-driver-threads"
		},
		{
			"name": "storage-driver-concurrency",
			"deprecated": true,
			"target": "storage-driver-limit-concurrency"
		},
		{
			"name": "load-rate-limit",
			"deprecated": true,
			"target": "load-op-limit-rate"
		},

		// v4.0
		{
			"name": "load-generator-recycle-enabled",
			"deprecated": true,
			"target": "load-op-recycle"
		},
		{
			"name": "load-generator-shuffle",
			"deprecated": true,
			"target": "load-op-shuffle"
		},
		{
			"name": "load-limit-concurrency",
			"deprecated": true,
			"target": "storage-driver-limit-concurrency"
		},
		{
			"name": "load-limit-rate",
			"deprecated": true,
			"target": "load-op-limit-rate"
		},
		{
			"name": "load-type",
			"deprecated": true,
			"target": "load-op-type"
		},
		{
			"name": "storage-driver-remote",
			"deprecated": true
		},
		{
			"name": "storage-driver-addrs",
			"deprecated": true,
			"target": "load-step-node-addrs"
		},
		{
			"name": "storage-driver-port",
			"deprecated": true,
			"target": "load-step-node-port"
		},
		{
			"name": "storage-driver-queue-input",
			"deprecated": true,
			"target": "storage-driver-limit-queue-input"
		},
		{
			"name": "storage-driver-queue-output",
			"deprecated": true,
			"target": "storage-driver-limit-queue-output"
		},
		{
			"name": "test-scenario-file",
			"deprecated": true,
			"target": "run-scenario"
		},
		{
			"name": "test-step-distributed",
			"deprecated": true
		},
		{
			"name": "test-step-id",
			"deprecated": true,
			"target": "load-step-id"
		},
		{
			"name": "test-step-limit-count",
			"deprecated": true,
			"target": "load-step-limit-count"
		},
		{
			"name": "test-step-limit-fail-count",
			"deprecated": true,
			"target": "load-step-limit-fail-count"
		},
		{
			"name": "test-step-limit-fail-rate",
			"deprecated": true,
			"target": "load-step-limit-fail-rate"
		},
		{
			"name": "test-step-limit-size",
			"deprecated": true,
			"target": "load-step-limit-size"
		},
		{
			"name": "test-step-limit-time",
			"deprecated": true,
			"target": "load-step-limit-time"
		}
	]
}
